#include "main.h"
#include "pros/adi.hpp"
#include "pros/misc.h"
#include "pros/motors.hpp"
#include "lemlib/api.hpp"
// constants
#define LEFT_MOTOR_PORT_1 1 // Change to the actual motor port
#define LEFT_MOTOR_PORT_2 2
#define RIGHT_MOTOR_PORT_1 -4
#define RIGHT_MOTOR_PORT_2 -5
#define INTAKE_MOTOR_PORT -6
#define CONVEYOR_MOTOR_PORT 7
#define PNEUMATIC_ADI_PORT 'A'

// Step 1, declare opjects
// 1.1 find the ports of all the electronics
// 1.2 declare the objects as seen below
//Motorgroups
//left 345
//right 89 10
pros::MotorGroup left_motors({LEFT_MOTOR_PORT_1, LEFT_MOTOR_PORT_2}); // left motors on ports 1, 2,
pros::MotorGroup right_motors({RIGHT_MOTOR_PORT_1,RIGHT_MOTOR_PORT_2}); // right motors on ports 4, 5,

//Motor
// port 6
pros::MotorGroup intake_motors ({INTAKE_MOTOR_PORT, CONVEYOR_MOTOR_PORT});

//Pneumatics
// port b
pros::adi::Pneumatics clamp (PNEUMATIC_ADI_PORT, false);

//Sensors
// rotation 2
// imu 20
pros::Rotation myRotation(2);
pros::IMU myImu(20);
// pros::color
// pros::vision
// pros::distance

/**
 * A callback function for LLEMU's center button.
 *
 * When this callback is fired, it will toggle line 2 of the LCD text between
 * "I was pressed!" and nothing.
 */
void on_center_button() {
	static bool pressed = false;
	pressed = !pressed;
	if (pressed) {
		pros::lcd::set_text(2, "I was pressed!");
	} else {
		pros::lcd::clear_line(2);
	}
}

/**
 * Runs initialization code. This occurs as soon as the program is started.
 *
 * All other competition modes are blocked by initialize; it is recommended
 * to keep execution time for this mode under a few seconds.
 */
void initialize() {
	pros::lcd::initialize();
	pros::lcd::set_text(1, "Hello PROS User!");

	pros::lcd::register_btn1_cb(on_center_button);
}

/**
 * Runs while the robot is in the disabled state of Field Management System or
 * the VEX Competition Switch, following either autonomous or opcontrol. When
 * the robot is enabled, this task will exit.
 */
void disabled() {}

/**
 * Runs after initialize(), and before autonomous when connected to the Field
 * Management System or the VEX Competition Switch. This is intended for
 * competition-specific initialization routines, such as an autonomous selector
 * on the LCD.
 *
 * This task will exit when the robot is enabled and autonomous or opcontrol
 * starts.
 */
void competition_initialize() {}

/**
 * Runs the user autonomous code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the autonomous
 * mode. Alternatively, this function may be called in initialize or opcontrol
 * for non-competition testing purposes.
 *
 * If the robot is disabled or communications is lost, the autonomous task
 * will be stopped. Re-enabling the robot will restart the task, not re-start it
 * from where it left off.
 */
void autonomous() {}

/**
 * Runs the operator control code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the operator
 * control mode.
 *
 * If no competition control is connected, this function will run immediately
 * following initialize().
 *
 * If the robot is disabled or communications is lost, the
 * operator control task will be stopped. Re-enabling the robot will restart the
 * task, not resume it from where it left off.
 */
void opcontrol() {
	// controller
	pros::Controller master(pros::E_CONTROLLER_MASTER);
	bool state = false;

	// robot loop
	while (true) {

		// drive train
		// Arcade control scheme
		int dir = master.get_analog(ANALOG_LEFT_Y);    // Gets amount forward/backward from left joystick
		int turn = master.get_analog(ANALOG_RIGHT_X);  // Gets the turn left/right from right joystick
		left_motors.move(dir - turn);                      // Sets left motor voltage
		right_motors.move(dir + turn);                     // Sets right motor voltage

		bool flagState = false;

		if (master.get_digital(pros::E_CONTROLLER_DIGITAL_R1)) {
			// Code that runs when pressed
			intake_motors.move(127); // ranges from -127 to 127
		} else {
			intake_motors.move(0);
		}

		// pneumatics
		if (master.get_digital_new_press(pros::E_CONTROLLER_DIGITAL_R2)) {
			if (!flagState) {
				clamp.extend();
				flagState = true;
			} else {
				mySolenoid.retract();
				flagState = false;
			}
		}
		
		if (master.get_digital_new_press(pros::E_CONTROLLER_DIGITAL_A)) {
			mySolenoid.toggle();
		}

		pros::delay(20);                               // Run for 20 ms then update
	}
}